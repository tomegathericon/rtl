#!/bin/zsh
set -x

cidr_vpc=6.255.0.0/16
public_cidr_subnet=6.255.255.0/24
private_cidr_subnet=6.255.1.0/24
aws_profile=kapoor.neelima@outlook.com
key_dir=keys
key_name=aws-$(openssl rand -hex 8)
sg_name=OpenWorld
ami_id=ami-6df8fe7a	
ecsrole=arn:aws:iam::120429547129:role/ecsrole
instance_type=t2.micro
blockmapping=skeletons/ec2_block_mapping
userdata=userdata/amazon-linux
docker_repo_name=tomegathericon/httpd
td=skeletons/create-task-definition.skeleton
td_name=tomegathericon
cluster_name=tomegathericon
service_name=tomegathericon
vpc_name=Tomegathericons_VPC
public_subnet_name=Tomegathericons_Public_Subnet
private_subnet_name=Tomegathericons_Private_Subnet
public_rt_name=Tomegathericons_Public_RT
private_rt_name=Tomegathericons_Private_RT
ig_name=Tomegathericons_IG
instance_name=Tomegathericons_Container
function create_vpc ()

{

vpc_id=$(aws ec2 create-vpc  --cidr-block $cidr_vpc --profile $aws_profile | jq '.Vpc.VpcId' | sed 's/"//g')


public_subnet_id=$(aws ec2 create-subnet --vpc-id $vpc_id --cidr-block $public_cidr_subnet --profile $aws_profile | jq '.Subnet.SubnetId' | sed 's/"//g')
private_subnet_id=$(aws ec2 create-subnet --vpc-id $vpc_id --cidr-block $private_cidr_subnet --profile $aws_profile | jq '.Subnet.SubnetId' | sed 's/"//g')

ig_id=$(aws ec2 create-internet-gateway --profile $aws_profile | jq '.InternetGateway.InternetGatewayId' | sed 's/"//g')

aws ec2 attach-internet-gateway --internet-gateway-id $ig_id --vpc-id $vpc_id --profile $aws_profile

public_rt_id=$(aws ec2 create-route-table --vpc-id $vpc_id --profile $aws_profile | jq '.RouteTable.RouteTableId' | sed 's/"//g')

aws ec2 associate-route-table --subnet-id $public_subnet_id --route-table-id $public_rt_id --profile $aws_profile

private_rt_id=$(aws ec2 create-route-table --vpc-id $vpc_id --profile $aws_profile | jq '.RouteTable.RouteTableId' | sed 's/"//g')

aws ec2 associate-route-table --subnet-id $private_subnet_id --route-table-id $private_rt_id --profile $aws_profile

sed -i s{rt_id{$public_rt_id{g skeletons/create_route.skeleton
sed -i s{ig_id{$ig_id{g skeletons/create_route.skeleton

aws ec2 create-route --cli-input-json file://skeletons/create_route.skeleton --profile $aws_profile

sed -i s{$public_rt_id{rt_id{g skeletons/create_route.skeleton
sed -i s{$ig_id{ig_id{g skeletons/create_route.skeleton

elastic_ip=$(aws ec2 allocate-address --domain vpc --profile $aws_profile | jq '.PublicIp' | sed 's/"//g')

sg_id=$(aws ec2 create-security-group --group-name $sg_name --description $sg_name --vpc-id $vpc_id --profile $aws_profile | jq '.GroupId' | sed 's/"//g')

aws ec2 authorize-security-group-ingress --group-id $sg_id --protocol all --port 0-65535 --cidr 0.0.0.0/0 --profile $aws_profile

aws ec2 create-tags --resources $vpc_id --tags Key=Name,Value=$vpc_name --profile $aws_profile
aws ec2 create-tags --resources $public_subnet_id --tags Key=Name,Value=$public_subnet_name --profile $aws_profile
aws ec2 create-tags --resources $private_subnet_id --tags Key=Name,Value=$private_subnet_name --profile $aws_profile
aws ec2 create-tags --resources $public_rt_id --tags Key=Name,Value=$public_rt_name --profile $aws_profile
aws ec2 create-tags --resources $pirivate_rt_id --tags Key=Name,Value=$private_rt_name --profile $aws_profile
aws ec2 create-tags --resources $ig_id --tags Key=Name,Value=$ig_name --profile $aws_profile
}


function create_instance ()

{

cd $key_dir

ssh-keygen -t rsa -f $key_name -N ''

aws ec2 import-key-pair --key-name $key_name --public-key-material "$(cat $key_name.pub)" --profile $aws_profile


cd /git/rtl/aws-cli

instance_id=$(aws ec2 run-instances --image-id $ami_id --count 1 --instance-type $instance_type --key-name $key_name --subnet-id $public_subnet_id --security-group-ids $sg_id --block-device-mappings file://$blockmapping --user-data file://$userdata --profile $aws_profile | jq '.Instances | .[0].InstanceId' | sed 's/"//g' )

sleep 45

aws ec2 associate-address --instance-id $instance_id --public-ip $elastic_ip --profile $aws_profile

aws ec2 create-tags --resources $instance_id --tags Key=Name,Value=$instance_name --profile $aws_profile

}

function create_registry ()

{

registry_id=$(aws ecr create-repository --repository-name $docker_repo_name --profile $aws_profile | jq '.repository.repositoryUri' | sed 's/"//g')

}

function create_cluster ()

{

aws ecs create-cluster --cluster-name tomegathericon --profile $aws_profile

}


function create_docker_image ()

{

cd /git/docker/httpd/

docker build -t $registry_id .

docker tag "$registry_id":latest $registry_id:1

cd /git/rtl/aws-cli

}

function push_to_ecr ()

{

$(aws ecr get-login --profile $aws_profile)

docker push $registry_id:1

}

function create_task_definition ()

{

td_image=$registry_id:1

sed -i s{td_name{$td_name{g $td
sed -i s{td_image{$td_image{g $td

td_arn=$(aws ecs register-task-definition --cli-input-json file://$td --profile $aws_profile | jq '.taskDefinition.taskDefinitionArn' | sed 's/"//g')


sed -i s{$td_name{td_name{g $td
sed -i s{$td_image{td_image{g $td

}

function create_service ()

{
aws ecs create-service --cluster $cluster_name --service-name $service_name --task-definition $td_arn  --desired-count 1 --profile $aws_profile

}

for f in $@; do

$f

shift

done
